<!-- European Union Public License version 1.2 -->
<!-- Copyright © 2020 Rick Beerendonk -->

@inject IJSRuntime JS

@using System
@implements IDisposable

<h1>Hello @Name! (@count time)</h1>

@code {
  private string count = "1";

  // Property
  [Parameter]
  public string Name { get; set; }

  public Hello()
  {
    JS.InvokeVoidAsync("logEvent", "Constructor", Name, count);
    Console.WriteLine("-- Constructor");
  }

  public void Dispose()
  {
    JS.InvokeVoidAsync("logEvent", "Dispose", Name, count);
    Console.WriteLine("-- Dispose");
  }

  protected override void OnInitialized()
  {
    JS.InvokeVoidAsync("logEvent", "OnInitialized", Name, count);
    Console.WriteLine("-- OnInitialized");
  }

  protected override async Task OnInitializedAsync()
  {
    await JS.InvokeVoidAsync("logEvent", "OnInitializedAsync", Name, count);
    Console.WriteLine("-- OnInitializedAsync");
    //await ...
  }

  public override async Task SetParametersAsync(ParameterView parameters)
  {
    string ParameterViewString = string.Concat(
      parameters.ToDictionary().Select(item => $"{item.Key}: {item.Value.ToString()}"));

    JS.InvokeVoidAsync("logEvent", $"SetParametersAsync (parameters: [{ParameterViewString}])", Name, count);
    Console.WriteLine($"-- SetParametersAsync (parameters: [{ParameterViewString}])");
    await base.SetParametersAsync(parameters);
  }

  protected override void OnParametersSet()
  {
    JS.InvokeVoidAsync("logEvent", "OnParametersSet", Name, count);
    Console.WriteLine("-- OnParametersSet");
  }

  protected override async Task OnParametersSetAsync()
  {
    await JS.InvokeVoidAsync("logEvent", "OnParametersSetAsync", Name, count);
    Console.WriteLine("-- OnParametersSetAsync");
    // await ...
  }

  protected override bool ShouldRender()
  {
    JS.InvokeVoidAsync("logEvent", "ShouldRender(): true", Name, count);
    Console.WriteLine("-- ShouldRender(): true");
    return true;
  }

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender)
    {
      JS.InvokeVoidAsync("logEvent", "OnAfterRender (firstRender = true)", Name, count);
      Console.WriteLine("-- OnAfterRender (firstRender = true)");
    }
    else
    {
      JS.InvokeVoidAsync("logEvent", "OnAfterRender (firstRender = false)", Name, count);
      Console.WriteLine("-- OnAfterRender (firstRender = false)");
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await JS.InvokeVoidAsync("logEvent", "OnAfterRenderAsync (firstRender = true)", Name, count);
      Console.WriteLine("-- OnAfterRenderAsync (firstRender = true)");
      // await ...
    }
    else
    {
      await JS.InvokeVoidAsync("logEvent", "OnAfterRenderAsync (firstRender = false)", Name, count);
      Console.WriteLine("-- OnAfterRenderAsync (firstRender = false)");

      if (Name == "B" && count == "1") {
      Console.WriteLine("-- -- new state --");
      this.count = "2";
      StateHasChanged();
    }
      // await ...
    }
  }
}